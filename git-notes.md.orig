<<<<<<< HEAD
# Use vimdiff as git mergetool
## git config
- add vimdiff as git mergetool to do that run the below commands
```bash
git config merge.tool vimdiff
git config merge.conflictstyle diff3
git config mergetool.prompt false
```
# Resolving merge conflict with vimdiff
- `git mergetool`
- Notes: `LOCAL` – this is file from the current branch `BASE` – common ancestor, how file looked before both changes `REMOTE` – file you are merging into your branch `MERGED` – merge result, this is what gets saved in the repo
- move your cursor to a merge conflict area and then:
> :diffget RE
||||||| merged common ancestors
<<<<<<< Temporary merge branch 1
# changing remote urls
- `git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git`
# git status
- `git status -s` or `git stage --short` : display filenames and their tracking status
`$` `git  status -s
M    README
MM   Rakefile
A    lib/git.rb
M    lib/simplegit.rb
??   LICENSE.txt
`
## git submodules
- `git submodule add <url> path_to_submodule` : to add git submodule 
- `git submodule update` : same as git pull but supper repository tells its submodules to update itself
||||||| merged common ancestors
=======
=======
>>>>>>> 345433d34d43c3a2913f9feeea5c8731828aa180
# changing remote urls
- `git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git`
# git status
- `git status -s` or `git stage --short` : display filenames and their tracking status
```bash
$git  status -s
M    README
MM   Rakefile
A    lib/git.rb
M    lib/simplegit.rb
??   LICENSE.txt
```
## git submodules
- `git submodule add <url> path_to_submodule` : to add git submodule 
- `git submodule update` : same as git pull but supper repository tells its submodules to update itself
to stage only modified files
========
- git add -u
# to make git diff use vimdiff for viewing the git diff of two files
- git config --global diff.tool vimdiff
- git config --global difftool.prompt false
- git config --global alias.d difftool
